<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>정말 중요한 core 페이지</title>
</head>
<body>


	<h1>JSTL Core Library</h1>
	
	<h3>1. 변수(속성 == attribute)</h3>
	
	<pre>
		* 변수 선언 (&lt;c:set var="변수명" value="리터럴" scope="스코프영역지정(생략가능)" /&gt;)
		- 변수를 선언하고 초기값을 대입해두는 기능을 제공
		- 더나아가서 해당 변수를 어떤 scope영역에 담아둘건지 지정 가능함
			(scope속성 생략 시 pageScope에 담김)
		=> 즉, 해당 scope영역에 setAttribute라는 메서드를 이용해서
			key + value형태로 데이터를 담아둔다라고 생각하면 된다.
		=> c:set을 통해 선언된 변수는 EL로 접근해서 사용 가능 (스크립팅 원소로는 접근 불가능)
	
		* 주의사항
		- 변수의 타입을 별도로 지정하지 않음(초기값을 반드시 지정해둬야됌!!!)
	</pre>
	
	<c:set var="num1" value="10"></c:set> <!-- pageScope에 담김 pageContext.setAttribute("num1", "10"); -->
	<c:set var="num2" value="20" scope="request"></c:set> <!-- requestScope에 담김 request.setAttribute("num2", "20"); -->
	
	num1의 변수값 : ${ num1 } <br>
	num2의 변수값 : ${ num2 } <br>
	
	<c:set var="result" value="${ num1 + num2 }" scope="session"></c:set>
	
	result변수값 : ${ result } <br>
	
	<!-- 
		변수명만 제시하면 공유범위가 작은 곳에서부터 찾음
		: 티가 나지는 않지만 속도가 느려질수도 있다.(스코프영역.변수명 을 권장)
	 -->
	
	${ pageScope.num1 } <br>
	${ requestScope.num2 } <br>
	${ sessionScope.result } <br><br>	
	
	<c:set var="result" scope="request"	>9999</c:set>
	<!-- value속성 말고 시작태그와 종료태그 사이에도 대입할 값을 기술 가능 -->
	
	${ requestScope.result } <br>
	${ sessionScope.result } <br>
	
	<hr>
	
	<pre>
		* 변수 삭제(&lt;c:remove var="제거하고자하는 변수명" scope="스코프영역지정가능(생략가능)" /&gt;)
		- 해당 변수를 scope에서 찾아서 제거하는 태그
		- scope지정 생략시 모든 scope에서 해당 변수를 다 찾아서 제거함
		=> 즉, 해당 scope에 .removeAttribute("키값"); 이용해서 제거하는거라고 생각하면 된다.
	</pre>
	
	삭제 전 result : ${ result } <br>
	1) 특정 scope를 지정해서 삭제 <br>
	<c:remove var="result" scope="request" />
	
	request 삭제 후 result : ${ result } <br>
	
	2) 모든 scope에서 삭제 <br>
	<c:remove var="result" />
	모든 scope에서 삭제 후 result : ${ result } <br>
	
	<hr>
	
	<pre>
		* 변수 출력(&lt;c:out value="출력하고자하는값" default="기본값(생략가능)" escapeXml="true(기본값, 생략가능) / false" /&gt;)
		- 데이터를 출력하고자 할 때 사용하는 태그
		- default : 기본값, value 속성에 출력하고자 하는 값이 없을 경우 대체해서 기본값으로 출력할 내용물을 기술(생략가능)
		
	</pre>
	
	result를 EL로 출력 : ${ result } <br>
	result를 c:out으로 출력 : <c:out value="${ result }" /> <br>
	result를 c:out으로 출력할건데 default를 지정해서 출력 : <c:out value="${ result }" default="값이 없음" /> <br><br>
	
	<!-- escapeXml 테스트 -->
	<!-- 테스트하기 위한 변수 선언 -->
	<c:set var="outTest" value="<b>출력테스트</b>" />
	
	outTest를 c:out으로 출력할건데 esxapeXml 속성을 생략하고 출력(true) : <c:out value="${ outTest }"/> <br>
	outTest를 c:out으로 출력할건데 escapeXml 속성을 false로 지정하고 출력 : <c:out value="${ outTest }" escapeXml="false" />
	
	<hr>
	
	<h3>2. 조건문 - if(&lt;c:if test="조건식"&gt; 조건이 true일 경우 실행할 내용물 &lt;/c:if&gt;)</h3>
	
	<pre>
		- JAVA의 단일 if문과 비슷한 역할을 하는 태그
		- 조건식을 test라는 속성에 작성 (*** 조건을 작성할 경우에는 반드시 EL구문으로 작성함 ***)
	</pre>
	
	<%--
	기존방식 
	<% if(num1 > num2) { %>
		쏼라쏼라
	<% } %>
	--%>

	<c:if test="${ num1 gt num2 }" >
		<b>num1이 num2보다 큽니다.</b>
	</c:if>

	<c:if test="${ num1 le num2 }">
		<b>num1이 num2보다 작거나 같습니다.</b>
	</c:if>
	
	<br>
	
	<c:set var="str" value="안녕하세요" />
	
	<c:if test="${ str eq '안녕하세요' }" >
		<mark>안녕하세요가 맞습니다.</mark>
	</c:if>
	
	<c:if test="${ str ne '안녕하세요' }" >
		<mark>안녕하세요가 아닙니다.</mark>
	</c:if>
	
	<br>
	
	<h3>3. 조건문 - choose, when, otherwise </h3>
	
	<pre>
		[ 표현법 ]
		&lt;c:choose&gt;
			&lt;c:when test="조건1"&gt; ~~~ &lt;/c:when&gt;
			&lt;c:when test="조건2"&gt; ~~~ &lt;/c:when&gt;
			...
			&lt;c:otherwise&gt; ~~~~ &lt;/c:otherwise&gt; => else블럭에 해당됌, switch문의 default
		&lt;/c:choose&gt;
		
		- JAVA의 if-else if문, switch문과 비슷한 역할을 하는 태그
		- 각 조건들을 c:choose의 하위요소로 c:when을 통해서 작성
		- c:otherwise에는 조건을 적어주지 않음
	</pre>
	
	<c:choose>
		<c:when test="${ num1 eq 20 }">
			<b>처음 뵙겠습니다.</b>
		</c:when>
		<c:when test="${ num1 eq 10 }">
			<b>또 만났네요. </b>
		</c:when>
		<c:otherwise>
			<b>난 다 아니야~</b>
		</c:otherwise>
	</c:choose>

	<hr>
	
	<h3>4. 반복문 - forEach </h3>
	
	<pre>
		[ 표현법 ]
		for loop 문
		&lt;c:forEach var="변수명" begin="초기값" end="끝값" step="증가시킬값(생략가능)"&gt;
			반복적으로 실행할 코드
		&lt;/c:forEach&gt;
		=> step을 생략 시 기본값은 1임(step="1")
		
		향상된 for문
		&lt;c:forEach var="변수명" items="순차적으로 접근할 배열명 또는 컬렉션 명" &gt;
			반복적으로 실행할 코드
		&lt;/c:forEach&gt;
		
		var속성으로 선언된 변수에 접근하고자 할때는 반드시 EL구문으로 접근
	</pre>

	<!-- for loop문 -->
	
	<c:forEach var="i" begin="1" end="10">
		반복확인 : ${ i } <br>
	</c:forEach>

	<br>
	
	<c:forEach var="i" begin="1" end="10" step="2">
		반복확인 : ${ i } <br>
	</c:forEach>
	
	<!-- 태그 안에도 적용 가능 -->
	
	<c:forEach var="i" begin="1" end="6">
		<h${ i }> 태그안에도 적용 가능하다. </h>
	</c:forEach>
	
	<br>

	<!-- 향상된 for문 -->
	<!-- 테스트를 위한 배열 만들기 -->	
	<c:set var="colors">
		red, orangered, orange, yellow, yellowgreen, greenyellow, green
	</c:set><!-- 배열과 같은 역할 -->
	
	color 값 : ${ colors } <br>
	
	<ul>
		<c:forEach var="c" items="${ colors }">
			<!-- 태그안에도 적용 가능 -->
			<li style="color:${ c };">${ c }</li>
		</c:forEach>
	</ul>
	
	<br>
	
	<!-- 최종 응용 -->
	<%@ page import="java.util.ArrayList, com.kh.model.vo.Person" %>
	<%
		// 여기는 사실 컨트롤러다.
		ArrayList<Person> list = new ArrayList();
		list.add(new Person("홍길동", 20, "남자"));
		list.add(new Person("어쩌고", 14, "남자"));
		list.add(new Person("저쩌고", 33, "여자"));
	
		//request.setAttribute("pList", list);
		// 여기까지 코드가 원래 이페이지가 응답되기 전에 서블릿에서 완성했어야 하는 코드
	%>
	
	<c:set var="pList" value="<%= list %>" scope="request"></c:set>
	
	<table border="1" >
		<thead>
			<th>번호</th>
			<th>이름</th>
			<th>나이</th>
			<th>성별</th>
		</thead>
		<tbody>
		<%--	
			기존방식
			<% if(pList.isEmpty()) { %>
				없습니다.
			<% } else { %>
				<% for(Person p : pList) { %>
					<tr>
						<td><%= p.get ~~~ %> </td>
						<td><%= p.get ~~~ %> </td>
						<td><%= p.get ~~~ %> </td>
					</tr>
				<% } %>
			<% } %>
		--%>
		
		<c:choose>
			<c:when test="${ empty pList }">
				<tr align="center">
					<td colspan="3"> 없으요~ </td>
				</tr>
			</c:when>
			<c:otherwise>
				<c:forEach var="p" items="${ requestScope.pList }" varStatus="status">
					<tr align="center">
						<td>${ status.index }</td>
						<td>${ p.name }</td>
						<td>${ p.age }</td>
						<td>${ p.gender }</td>
					</tr>
				</c:forEach>
			</c:otherwise>
		  </c:choose>
		</tbody>	
	</table>
	
	
	
	
	



</body>
</html>